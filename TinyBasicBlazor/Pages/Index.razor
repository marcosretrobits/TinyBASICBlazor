@page "/"
@page "/{programId}"

@inject ProgramsService ProgramsService
@inject NavigationManager NavigationManager

<div class="sidebar">

    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href="">TinyBasicBlazor</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        <ProgramsList Title="Load sample program:" TinyBasicConsole="TinyBasicConsole" />
        <FileLoader Title="Load file:" TinyBasicConsole="TinyBasicConsole" />
    </div>

</div>

<div class="main">
    <div class="top-row px-4">
        <a href="https://retrobits.altervista.org" target="_blank" class="ml-md-auto">marco's retrobits</a>
    </div>

    <div class="content px-4">

        <h1>10 PRINT "Hello!"</h1>
        <p>
            Welcome to
            <a href="https://github.com/marcosretrobits/TinyBasicBlazor" title="TinyBasicBlazor on GitHub">TinyBasicBlazor</a>, an experimental interactive
            <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.1">Blazor</a>
            <a href="https://webassembly.org/">WebAssembly</a>
            <a href="https://en.wikipedia.org/wiki/Tiny_BASIC">Tiny Basic</a>
            environment by <a href="https://retrobits.altervista.org/">Marco Varesio</a>.
            <br />
            Based on <a href="http://www.thisiscool.com/tinybasicnet.htm">TinyBasic.NET</a>,
            <a href="http://www.thisiscool.com">Mohan Embar</a>'s
            <a href="http://www.thisiscool.com/tinybasicnet.htm">C#</a>
            <a href="http://www.thisiscool.com/tinybasic.htm">port</a> of
            <a href="http://www.ittybittycomputers.com/">Tom Pittman</a>'s <a href="http://www.ittybittycomputers.com/IttyBitty/TinyBasic/index.htm">Tiny Basic</a> interpreter
            <a href="http://www.ittybittycomputers.com/IttyBitty/TinyBasic/TinyBasic.c">C rewrite</a>.
        </p>

        <TinyBasicConsole Id="tinyBasicConsole" Rows="24" Cols="80" @ref="TinyBasicConsole" />

        <div class="alert alert-secondary mt-4" role="alert">
            <span class="text-nowrap">
                <a href="http://www.ittybittycomputers.com/IttyBitty/TinyBasic/">TinyBasic interpreter</a> Copyright 1976 <a href="http://www.ittybittycomputers.com">Itty Bitty Computers</a>, used by permission.
            </span>
        </div>

    </div>
</div>

@code {

    [Parameter]
    public string ProgramId { get; set; }

    public TinyBasicConsole TinyBasicConsole { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check route parameter
            if (!string.IsNullOrEmpty(ProgramId))
            {
                string program = await ProgramsService.Load(ProgramId);

                if (!string.IsNullOrEmpty(program))
                {
                    await TinyBasicConsole.TypeAndRun(program, null);
                }
            }
            else
            {
                // Query string parameters
                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                // Get program
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("p", out var programId) && !string.IsNullOrEmpty(programId))
                {
                    string program = await ProgramsService.Load(programId);
                    string[] input = null;

                    if (!string.IsNullOrEmpty(program))
                    {
                        // Get input
                        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("i", out var inputId) && !string.IsNullOrEmpty(programId))
                        {
                            input = ProgramsService.GetProgramInput(programId, inputId);
                        }

                        await TinyBasicConsole.TypeAndRun(program, input);
                    }
                }

            }
        }
    }
}
