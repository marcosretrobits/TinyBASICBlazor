@inject ProgramsService ProgramsService

    <div class="content px-1">

        @if (programs == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <h6>@Title</h6>
            <ul>
                @foreach (var program in programs)
                {
                <li>

                    @{
                        string programFilePath = ProgramsService.GetProgramFilePath(program.Id);
                    }

                    <a href="@programFilePath" title="@program.Summary" @onclick="e => LoadNRun(program.Id, null)" @onclick:preventDefault>@program.Name</a>
                    (<a href="@programFilePath" target="_blank">Listing</a>)

                    @if (program.Inputs != null && program.Inputs.Length > 0)
                    {
                        <ul>
                            @foreach (var input in program.Inputs)
                            {
                                <li>
                                    <a href="@programFilePath" @onclick="e => LoadNRun(program.Id, input.Lines)" @onclick:preventDefault>@input.Name</a>
                                </li>
                            }
                        </ul>
                    }
                </li>
                }
            </ul>
        }

    </div>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public TinyBasicConsole TinyBasicConsole { get; set; }

    private Program[] programs;

    protected override void OnInitialized()
    {
        programs = ProgramsService.Programs;
    }

    private async Task LoadNRun(string programId, string[] programInput)
    {
        var programContent = await ProgramsService.Load(programId);
        await TinyBasicConsole.TypeAndRun(programContent, programInput);
    }
}
