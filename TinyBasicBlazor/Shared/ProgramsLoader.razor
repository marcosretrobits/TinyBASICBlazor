@inject HttpClient HttpClient

    <div class="content px-1">

        @if (programs == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <h6>@Title</h6>
            <ul>
                @foreach (var program in programs)
                {
                    <li>
                        <a href="@GetProgramFilePath(program.FileName)" title="@program.Summary" @onclick="e => LoadNRun(GetProgramFilePath(program.FileName), null)" @onclick:preventDefault>@program.Name</a>
                        (<a href="@GetProgramFilePath(program.FileName)" target="_blank">Listing</a>)
                        
                        @if (program.Inputs != null && program.Inputs.Length > 0)
                        {
                            <ul>
                                @foreach(var input in program.Inputs)
                                {
                                    <li>
                                        <a href="@GetProgramFilePath(program.FileName)" @onclick="e => LoadNRun(GetProgramFilePath(program.FileName), input.Lines)" @onclick:preventDefault>@input.Name</a>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }

    </div>

@code {

    public class Program
    {
        public class Input
        {
            public string Name { get; set; }

            public string[] Lines { get; set; }
        }

        public string Id { get; set; }

        public string Name { get; set; }

        public string FileName { get; set; }

        public string Summary { get; set; }

        public Input[] Inputs { get; set; }
    }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public TinyBasicConsole TinyBasicConsole { get; set; }

    private Program[] programs;

    protected override async Task OnInitializedAsync()
    {
        programs = await HttpClient.GetFromJsonAsync<Program[]>(GetProgramFilePath("programs.json"));
    }

    private string GetProgramFilePath(string fileName)
    {
        return $"programs/{fileName}";
    }

    private async Task LoadNRun(string programFilePath, string[] programInput)
    {
        var programContent = await HttpClient.GetStringAsync(programFilePath);
        TinyBasicConsole.TypeAndRun(programContent, programInput);
    }
}
